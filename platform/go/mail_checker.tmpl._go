package mail_checker

import (
	"regexp"
	"strings"
)

var (
	// emailRegex from https://github.com/asaskevich/govalidator as the go regex implementation does not fully support Perl
	// syntax: (?!
	emailRegex = regexp.MustCompile("^(((([a-zA-Z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])+(\\.([a-zA-Z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])|(\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-zA-Z]|\\d|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])|(([a-zA-Z]|\\d|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])([a-zA-Z]|\\d|-|\\.|_|~|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])*([a-zA-Z]|\\d|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])))\\.)+(([a-zA-Z]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])|(([a-zA-Z]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])([a-zA-Z]|\\d|-|_|~|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])*([a-zA-Z]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])))\\.?$")
	blacklist  = newMap([]string{
		{{&listSTR}},
	})
	itemExists = struct{}{}
)

func newMap(domains []string) map[string]struct{} {

	m := make(map[string]struct{}, len(domains))

	for _, domain := range domains {
		m[domain] = itemExists
	}

	return m
}

func allDomainSuffixes(domain string) []string {

	components := strings.Split(domain, ".")

	var result []string

	for i := range components {
		result = append(result, strings.Join(components[i:], "."))
	}

	return result
}

// IsValid checks if the email address is a valid email address and is not blacklisted
func IsValid(email string) bool {

	email = strings.ToLower(email)

	return emailRegex.MatchString(email) && !IsBlacklisted(email)
}

// IsBlacklisted checks if the email address is blacklisted
func IsBlacklisted(email string) bool {

	parts := strings.Split(email, "@")

	if len(parts) != 2 {
		return false
	}

	for _, domainSuffix := range allDomainSuffixes(parts[1]) {
		if _, contains := blacklist[domainSuffix]; contains {
			return true
		}
	}

	return false
}
